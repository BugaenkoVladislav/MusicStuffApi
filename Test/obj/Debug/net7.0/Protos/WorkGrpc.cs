// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/work.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace MusicWorkService {
  public static partial class Work
  {
    static readonly string __ServiceName = "Work";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MusicWorkService.NewTrack> __Marshaller_NewTrack = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MusicWorkService.NewTrack.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MusicWorkService.Track> __Marshaller_Track = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MusicWorkService.Track.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MusicWorkService.NewAlbum> __Marshaller_NewAlbum = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MusicWorkService.NewAlbum.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MusicWorkService.Album> __Marshaller_Album = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MusicWorkService.Album.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MusicWorkService.NewTrack, global::MusicWorkService.NewTrack> __Method_AddMusic = new grpc::Method<global::MusicWorkService.NewTrack, global::MusicWorkService.NewTrack>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddMusic",
        __Marshaller_NewTrack,
        __Marshaller_NewTrack);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MusicWorkService.Track, global::MusicWorkService.Track> __Method_DeleteMusic = new grpc::Method<global::MusicWorkService.Track, global::MusicWorkService.Track>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMusic",
        __Marshaller_Track,
        __Marshaller_Track);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MusicWorkService.NewAlbum, global::MusicWorkService.NewAlbum> __Method_AddAlbum = new grpc::Method<global::MusicWorkService.NewAlbum, global::MusicWorkService.NewAlbum>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddAlbum",
        __Marshaller_NewAlbum,
        __Marshaller_NewAlbum);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MusicWorkService.Album, global::MusicWorkService.Album> __Method_DeleteAlbum = new grpc::Method<global::MusicWorkService.Album, global::MusicWorkService.Album>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAlbum",
        __Marshaller_Album,
        __Marshaller_Album);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MusicWorkService.WorkReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Work</summary>
    [grpc::BindServiceMethod(typeof(Work), "BindService")]
    public abstract partial class WorkBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MusicWorkService.NewTrack> AddMusic(global::MusicWorkService.NewTrack request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MusicWorkService.Track> DeleteMusic(global::MusicWorkService.Track request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MusicWorkService.NewAlbum> AddAlbum(global::MusicWorkService.NewAlbum request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MusicWorkService.Album> DeleteAlbum(global::MusicWorkService.Album request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Work</summary>
    public partial class WorkClient : grpc::ClientBase<WorkClient>
    {
      /// <summary>Creates a new client for Work</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorkClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Work that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorkClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorkClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorkClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MusicWorkService.NewTrack AddMusic(global::MusicWorkService.NewTrack request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddMusic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MusicWorkService.NewTrack AddMusic(global::MusicWorkService.NewTrack request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddMusic, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MusicWorkService.NewTrack> AddMusicAsync(global::MusicWorkService.NewTrack request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddMusicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MusicWorkService.NewTrack> AddMusicAsync(global::MusicWorkService.NewTrack request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddMusic, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MusicWorkService.Track DeleteMusic(global::MusicWorkService.Track request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMusic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MusicWorkService.Track DeleteMusic(global::MusicWorkService.Track request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMusic, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MusicWorkService.Track> DeleteMusicAsync(global::MusicWorkService.Track request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMusicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MusicWorkService.Track> DeleteMusicAsync(global::MusicWorkService.Track request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMusic, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MusicWorkService.NewAlbum AddAlbum(global::MusicWorkService.NewAlbum request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAlbum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MusicWorkService.NewAlbum AddAlbum(global::MusicWorkService.NewAlbum request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddAlbum, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MusicWorkService.NewAlbum> AddAlbumAsync(global::MusicWorkService.NewAlbum request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAlbumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MusicWorkService.NewAlbum> AddAlbumAsync(global::MusicWorkService.NewAlbum request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddAlbum, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MusicWorkService.Album DeleteAlbum(global::MusicWorkService.Album request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAlbum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MusicWorkService.Album DeleteAlbum(global::MusicWorkService.Album request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAlbum, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MusicWorkService.Album> DeleteAlbumAsync(global::MusicWorkService.Album request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAlbumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MusicWorkService.Album> DeleteAlbumAsync(global::MusicWorkService.Album request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAlbum, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WorkClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WorkClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WorkBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddMusic, serviceImpl.AddMusic)
          .AddMethod(__Method_DeleteMusic, serviceImpl.DeleteMusic)
          .AddMethod(__Method_AddAlbum, serviceImpl.AddAlbum)
          .AddMethod(__Method_DeleteAlbum, serviceImpl.DeleteAlbum).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WorkBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddMusic, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MusicWorkService.NewTrack, global::MusicWorkService.NewTrack>(serviceImpl.AddMusic));
      serviceBinder.AddMethod(__Method_DeleteMusic, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MusicWorkService.Track, global::MusicWorkService.Track>(serviceImpl.DeleteMusic));
      serviceBinder.AddMethod(__Method_AddAlbum, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MusicWorkService.NewAlbum, global::MusicWorkService.NewAlbum>(serviceImpl.AddAlbum));
      serviceBinder.AddMethod(__Method_DeleteAlbum, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MusicWorkService.Album, global::MusicWorkService.Album>(serviceImpl.DeleteAlbum));
    }

  }
}
#endregion
